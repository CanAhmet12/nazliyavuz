version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: nazliyavuz_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nazliyavuz_platform
      POSTGRES_USER: nazliyavuz_user
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - nazliyavuz_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nazliyavuz_user -d nazliyavuz_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nazliyavuz_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_123 --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - nazliyavuz_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Laravel Application
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nazliyavuz_app
    restart: unless-stopped
    working_dir: /var/www
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=nazliyavuz_platform
      - DB_USERNAME=nazliyavuz_user
      - DB_PASSWORD=secure_password_123
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password_123
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    volumes:
      - ./backend:/var/www
      - ./backend/storage:/var/www/storage
      - ./backend/bootstrap/cache:/var/www/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nazliyavuz_network
    healthcheck:
      test: ["CMD", "php", "artisan", "health:check"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: nazliyavuz_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend:/var/www
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - nazliyavuz_network

  # Queue Worker
  queue:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nazliyavuz_queue
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    volumes:
      - ./backend:/var/www
    depends_on:
      - postgres
      - redis
    networks:
      - nazliyavuz_network

  # Scheduler
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nazliyavuz_scheduler
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan schedule:work
    volumes:
      - ./backend:/var/www
    depends_on:
      - postgres
      - redis
    networks:
      - nazliyavuz_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nazliyavuz_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nazliyavuz_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: nazliyavuz_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - nazliyavuz_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  nazliyavuz_network:
    driver: bridge