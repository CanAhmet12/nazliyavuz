# Multi-stage build for production
FROM php:8.2-fpm-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    oniguruma-dev \
    libzip-dev \
    postgresql-dev \
    sqlite \
    sqlite-dev \
    redis \
    supervisor \
    nginx

# Install PHP extensions
RUN docker-php-ext-install \
    pdo \
    pdo_pgsql \
    pdo_sqlite \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    zip \
    opcache

# Install Redis extension
RUN pecl install redis && docker-php-ext-enable redis

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Copy composer files
COPY composer.json composer.lock ./

# Install dependencies (no dev dependencies in production)
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Copy application code
COPY . .

# Copy init script for migrations and seeding
COPY init.sh /init.sh
RUN chmod +x /init.sh

# Create database directory and file
RUN mkdir -p /var/www/database && touch /var/www/database/database.sqlite

# Set proper permissions
RUN chown -R www-data:www-data /var/www \
    && chmod -R 755 /var/www/storage \
    && chmod -R 755 /var/www/bootstrap/cache \
    && chmod 777 /var/www/database/database.sqlite

# Production stage
FROM base AS production

# Configure PHP-FPM for production
COPY docker/php-fpm.conf /usr/local/etc/php-fpm.d/www.conf
COPY docker/php.ini /usr/local/etc/php/php.ini

# Configure OPcache for production
COPY docker/opcache.ini /usr/local/etc/php/conf.d/opcache.ini

# Configure Nginx
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/http.d/default.conf

# Configure Supervisor
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create necessary directories
RUN mkdir -p /var/log/supervisor \
    && mkdir -p /var/run/php-fpm \
    && mkdir -p /var/cache/nginx \
    && mkdir -p /var/log/nginx

# Expose ports
EXPOSE 80 9000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Run initialization (migrations and seeding) then start supervisor
CMD ["/bin/sh", "-c", "/init.sh && /usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# Development stage
FROM base AS development

# Install Xdebug for development
RUN pecl install xdebug && docker-php-ext-enable xdebug

# Copy development configuration
COPY docker/php-fpm-dev.conf /usr/local/etc/php-fpm.d/www.conf
COPY docker/php-dev.ini /usr/local/etc/php/php.ini
COPY docker/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

# Install dev dependencies
RUN composer install --optimize-autoloader

# Set proper permissions for development
RUN chown -R www-data:www-data /var/www \
    && chmod -R 777 /var/www/storage \
    && chmod -R 777 /var/www/bootstrap/cache

# Expose ports
EXPOSE 80 9000 9003

# Start PHP-FPM
CMD ["php-fpm"]
