Kapsamlı Proje Dokümanı

Aşağıda, uygulamanın tam kapsamlı, profesyonel ve teknik ayrıntılarla hazırlanmış dokümanı yer almaktadır. Her bir bölüm işlev, akış, teknik seçim, veritabanı yapısı, API sözleşmeleri, UI/UX akışları, operasyonel gereksinimler, test / kabul kriterleri ve sonrasında yapılacaklar şeklinde detaylandırılmıştır. Bu dokümanı doğrudan müşteriye sunabilir veya geliştirici ekibe referans olarak verebilirsin.

1. Yüksek Seviye Tanım & Hedefler

Amaç:
Her türlü eğitim, beceri ve yetenek (okul dersleri, müzik, dans, spor, kişisel gelişim, yazılım vs.) verebilen öğretmen/uzmanların, öğrenmek isteyen öğrencilerle buluştuğu modern, güvenilir ve ölçeklenebilir bir platform inşa etmek.

Hedefler:

Kullanıcı dostu kayıt/profil yönetimi

Kapsamlı kategori ve filtreleme ile hızlı eşleşme

Güvenilir rezervasyon akışı (talep → onay → takvim)

Yönetsel kontrol ile içerik/moderasyon desteği

Mobil-first (Flutter) uygulama + RESTful backend

Ölçeklenebilir, güvenli ve test edilebilir altyapı

2. Kullanıcı Tipleri & Rollerin Ayrıntılı İşlevleri
2.1 Öğrenci (Learner)

Kayıt / giriş, e-posta onayı, şifre sıfırlama.

Profil: isim, yaş, şehir, tercih edilen diller, ilgi/kategori tercihleri, kısa biyografi.

Arama & filtreleme: kategori, seviye, fiyat, konum (isteğe bağlı), öğretmen puanı.

Favorilere ekleme (bookmark).

Rezervasyon talebi oluşturma (tarih önerisi, süre, ücret teklifi).

Rezervasyon geçmişi ve takvim görünümü.

Bildirim merkezi (uygulama içi + e-posta).

2.2 Öğretmen / Eğitmen (Instructor)

Kayıt / e-posta doğrulama, detaylı profil (fotoğraf, CV/sertifikalar, eğitim geçmişi, referanslar).

Uzmanlık alanları (çoklu kategori), ders açıklamaları, fiyatlandırma (saatlik / paket).

Uygunluk takvimi (mevcut zaman aralıklarını işaretleme).

Gelen rezervasyon taleplerini onaylama / reddetme / mesaj yoluyla ek bilgi isteme.

Ders geçmişi ve ödemeye ilişkin (ileride) raporlar.

2.3 Yönetici (Admin)

Kullanıcı onay/ret, hesap askıya alma ve silme.

İçerik moderasyonu (profil açıklamaları, yorumlar, talep içerikleri).

Kategori, sayfa içerikleri, SSS, iletişim bilgileri yönetimi.

Rezervasyonları denetleme ve gerektiğinde müdahale.

Basit raporlama (kayıt sayıları, rezervasyon trendleri).

3. Temel Fonksiyonel Modüller (Detaylı)
3.1 Kayıt / Giriş / Auth

Akış: Kayıt (email, şifre, rol seçimi: öğrenci/öğretmen), e-posta doğrulama linki.

Güvenlik: Şifreler bcrypt/argon2 ile hashlenir. JWT token ile API erişimi. Refresh token yapısı (24 saatte token, refresh ile 30 gün vs.).

API örneği:

POST /api/auth/register — payload: {name,email,password,role} → response 201 + {message, user, token}

POST /api/auth/login — payload: {email,password} → response 200 + {token, expires_in, refresh_token}

3.2 Profil Yönetimi

Öğretmen profilinde alanlar: title, bio, photo_url, education[], certifications[], categories[], class_levels[], price_hour, languages[].

Öğrenci profilinde: interests[], preferred_languages, timezone.

Endpointler: GET /api/profile/{id}, PUT /api/profile/{id}. Yetkilendirme: sadece kendi profiline güncelleme.

3.3 Kategori & Etiketleme Sistemi

Çok seviyeli kategori ağacı (ana kategori → alt kategori).

Her öğretmen bir veya birden fazla kategori ile etiketlenir.

Tag/etiket desteği (örn. “gitar-jazz”, “yoga-hamilelik” gibi).

3.4 Arama & Filtreleme

Basit: PostgreSQL full-text search; ileriye dönük Elasticsearch entegrasyonu.

Filtre opsiyonları: kategori, seviye, fiyat aralığı, dil, öğretmen puanı, şehir/uzaktan ders (online/yerinde).

Paginasyon: page & per_page parametreleri, default 20.

3.5 Rezervasyon (Booking) Akışı

Reservation model alanları: id, student_id, teacher_id, category_id, subject, proposed_datetime, duration_minutes, price, status (pending/accepted/rejected/cancelled/completed), created_at, updated_at.

İş akışı: Öğrenci rezervasyon talebi → Öğretmene bildirim → Öğretmen kabul/ret → Onaylanırsa takvime düşer.

Kısıtlar: aynı öğretmende çakışan rezervasyon engellenir (takvim kontrolü).

3.6 Bildirimler & E-posta

E-posta: SendGrid/Mailgun entegrasyonu. Template’ler: onay maili, rezervasyon bildirimi, rezervasyon kabul/ret.

Uygulama içi bildirim: Notifications tablosu; kullanıcı arayüzünde bildirim listesi.

Push notification: ilerleyen aşamada FCM/APNs ile eklenebilir.

3.7 Dosya / Medya Yönetimi

Profil fotoğrafları ve öğretmen sertifikaları AWS S3 üzerinde tutulur. Thumbnail ve optimizasyon için Lambda veya görsel servis kullanılabilir.

Maksimum dosya boyutu ve uzantı kontrolleri (örn. jpg/png/pdf).

3.8 Admin Paneli

Kullanıcı listesi & filtreleme, rezervasyon listesi, kategori yönetimi, moderasyon paneli.

Kullancıya ait aktivitelerin loglanması (audit trail).

3.9 Favori & Kayıt Sistemi

favorites tablosu: user_id, teacher_id, created_at. Öğrenciler beğendikleri öğretmenleri kaydedebilir.

3.10 İçerik Sayfaları

Hakkında, SSS, Gizlilik Politikası, Kullanım Koşulları — admin’den düzenlenebilir.

4. Teknik Mimari & Teknoloji Seçimi
4.1 Önerilen Stack (endüstri standardı, ölçeklenebilir)

Backend: Laravel 11 (PHP 8.3) — API odaklı yapı.

Kimlik Doğrulama: JWT (laravel-passport veya tymon/jwt) — mobil uygulama ile token bazlı oturum.

Veritabanı: PostgreSQL (ilişkisel, güçlü text search, genişleme kolaylığı).

Cache & Queue: Redis (caching + queue), Laravel Queue driver.

Search (opsiyonel gelişmiş): Elasticsearch (ileri seviye arama/öneri).

Storage: AWS S3 (medya), CloudFront CDN.

Mobil: Flutter 3 + Riverpod (veya Bloc) — tek kod tabanı iOS/Android.

Admin UI: Filament veya Laravel Nova (hızlı, güvenli admin).

Containerization & Deployment: Docker + docker-compose; production: Kubernetes (isteğe bağlı) veya Docker on ECS/DO droplet. Nginx reverse-proxy.

CI/CD: GitHub Actions / GitLab CI — test → build → deploy pipeline.

Monitoring: Sentry (hata izleme), Prometheus / Grafana (metrikler).

Logging: Centralized logs (ELK / CloudWatch).

4.2 Neden Bu Seçimler?

Laravel: Erişilebilir, güçlü ekosistem (migrations, queues, mail, notifications).

PostgreSQL: Full-text ve ilişkisel sorgularda güçlü performans.

Flutter: Hızlı mobil teslim, tek kod tabanı.

Redis: Cache + queue -> performans ve asenkron görev yönetimi.

5. Veritabanı Taslağı (Örnek Şemalar / Özet)
5.1 Temel Tablolar

users (id, name, email, password_hash, role, verified_at, profile_photo_url, created_at, updated_at)

teachers (user_id PK, bio, education JSON, certifications JSON, price_hour, languages JSON, rating_avg)

categories (id, parent_id, name, slug)

teacher_category (teacher_id, category_id) — many-to-many

reservations (id, student_id, teacher_id, category_id, subject, proposed_datetime, duration_min, price, status, created_at, updated_at)

notifications (id, user_id, type, payload JSON, read_at, created_at)

favorites (id, user_id, teacher_id, created_at)

audit_logs (id, user_id, action, target_type, target_id, meta JSON, created_at)

5.2 Index & Performans

Indexes: users(email), categories(slug), reservations(student_id), reservations(teacher_id), full text index on teacher.bio + teacher.skills.

Partitioning: ileri kullanımda rezervasyon tablosu dönemsellik gerektiyse partition planı.

6. API Sözleşmeleri (Seçilmiş Örnekler)

Tüm endpointler https://api.domain.com/v1/... altında olacak. JSON formatı.

Auth

POST /v1/auth/register

Req: {name,email,password,role}

Res: 201 {user:{id,name,email,role}, token:{access,expires_in,refresh}}

POST /v1/auth/login

Req: {email,password}

Res: 200 {token:{...}, user:{...}}

Profil

GET /v1/users/{id} — public teacher profile (anonim erişim)

PUT /v1/users/{id} — update profile (auth + owner)

Arama & Liste

GET /v1/teachers?category=gitar&level=beginner&price_min=0&price_max=200&page=1

Res: {data:[{id,name,price_hour,short_bio}], meta:{page,total}}

Rezervasyon

POST /v1/reservations

Req: {student_id, teacher_id, category_id, proposed_datetime, duration_min}

Res: 201 {reservation:{...}}

PUT /v1/reservations/{id}/status (teacher)

Req: {status: "accepted"}

Res: 200 {reservation:{...}}

Bildirimler

GET /v1/notifications — paginated

Hata formatı (örnek)

400 Bad Request → {error:{code:'VALIDATION_ERROR', message:'validation messages array'}}

7. UI / UX Akışları & Ekran Listesi (Detaylı)
7.1 Mobil Ekranlar (Flutter)

Splash Screen (branding)

Onboarding (isteğe bağlı)

Auth: Register (role seçimi), Login, Password Reset

Home / Discover: Kategori kartları, trend öğretmenler, popüler alanlar

Search Screen: filtre paneli (kategori, seviye, fiyat, dil, online/yerinde)

Teacher List: kart görünümü (photo, name, short_bio, price, rating)

Teacher Detail: full bio, education, certificates (download), available times (takvim kısa), rezervasyon butonu, favori butonu

Reservation Flow: tarih seç, süre seç, not bırak, gönder

My Reservations: öğrenci için geçmiş, gelecek rezervasyonlar; teacher için bekleyen talepler

Profile: düzenleme ekranı (fotoğraf yükleme, kategoriler, fiyatlandırma)

Notifications: bildirim listesi

Admin (mobile web veya özel mobil admin): kullanıcı listesi, rezervasyon denetimi

7.2 UX Detayları

Form validasyonları anlık (client-side + server-side).

Yüklenme ve hata durumlarına karşı kullanıcıya net geri dönüş (toast/snackbar) göster.

Önbellek: öğretmen listesi için kısa TTL cache (örn. 5 dakika) — hızlı sonuç.

Accessibility: kontrast, font boyutu ayarları, screen-reader uyumluluğu.

8. Operasyonel Gereksinimler & DevOps
8.1 Container & Deploy

Dockerfile ve docker-compose geliştirme için.

Production: bir cloud sağlayıcı (AWS, DigitalOcean) üzerinde Docker+NGINX veya Kubernetes.

CI: GitHub Actions — push ile test, lint, build; master/production tag ile deploy.

Secrets: ortam değişkenleri (DATABASE_URL, JWT_SECRET, S3_KEYS) güvenli vault’ta tutulur.

8.2 Backups & DR

Günlük DB snapshot’ları (PostgreSQL), S3 üzerinde 30 günlük retention.

Restore senaryosu tanımlı; RTO/RPO hedefleri (ör. RTO 4saat, RPO 1saat tavsiye).

8.3 Monitoring & Logging

Hata takibi: Sentry — uygulama hataları ve stack trace.

Performans metrikleri: Prometheus + Grafana.

Log aggregation: ELK veya CloudWatch.

8.4 Ölçeklenebilirlik

Stateless backend container’ları (horizontal scaling).

Redis cache & queues ile yoğun işlemler asenkronize edilir (örn. mail gönderim, image processing).

DB read-replica yapısı, read-heavy sorgularda fayda.

9. Güvenlik & Uyumluluk
9.1 Temel Güvenlik Önlemleri

HTTPS zorunlu (SSL/TLS), HSTS.

JWT secret güçlü rastgele değer, token expiry.

Rate limiting: IP bazlı, auth endpointleri için stricter limit.

Input validation: server-side sanitization (SQL injection, XSS).

CSRF protection (web admin paneli için).

Dosya tarama / MIME & extension kontrolü (upload güvenliği).

9.2 KVKK / GDPR (uygulama uluslararası ise)

Kullanıcı verilerinin saklanması ve silinmesi süreçleri.

Gizlilik politika sayfası ve kullanıcı veri silme talebi (Right to be forgotten).

Veri işleme protokolleri ve sözleşmeler (third-party services için DPA).

10. Test Planı & Kalite Güvencesi
10.1 Otomatik Testler

Unit Tests: business logic, modeller, helper’lar.

Integration Tests: API endpointleri, DB etkileşimleri.

End-to-End (E2E): critical user journeys (kayıt, rezervasyon) — Cypress veya Flutter integration tests.

10.2 Manuel Testler / QA

Fonksiyonel test senaryoları (her modül için).

Mobil cihaz test matrix: iOS (son 3 sürüm), Android (son 3 sürüm) — farklı ekran boyutları.

Regresyon testleri & kabul testleri (UAT).

10.3 Performans Testi

Load test: rezervasyon akışı, öğretmen liste sorguları.

Stress test: pik kullanım simülasyonu (örn. kampanya günü).

11. Geliştirme Süreci, Teslimat & Handover
11.1 Önerilen Aşamalar & Milestones

Planlama & Wireframe (1 hafta): gereksinim doğrulama, temel wireframe’ler.

API & DB Mimarisi (1–2 hafta): migrations, temel modeller, auth.

Mobil UI & Auth (1–2 hafta): login, register, profile.

Arama & Teacher List/Detail (1–2 hafta)

Rezervasyon Akışı (1–2 hafta)

Admin Panel + Bildirimler (1 hafta)

QA & UAT (1 hafta)

Deploy & Handover (1 hafta)

(Toplam yaklaşık 8–10 hafta tipik MVP takvimi — ekip hızına göre değişir.)

11.2 Teslim Edilecekler (Handover)

Tam çalışan backend API reposu + dokümantasyon (OpenAPI/Swagger).

Flutter mobil uygulama kodu + build komutları.

Docker config, deployment runbook.

Yedekleme prosedürleri ve erişim bilgileri (prod keys verilecektir).

Kullanım kılavuzu (admin & temel operasyon).

Test raporları ve kabul kriterleri.

12. Operasyon Sonrası Destek & Eğitim

2 haftalık canlı destek (hata düzeltme, küçük değişiklikler).

Opsiyonel: aylık bakım paketleri (güncellemeler, güvenlik patchleri, monitoring).

Admin kullanıcı eğitimi (1 saatlik online demo + doküman).

13. Ölçümler, KPI’lar & Başarı Kriterleri

Kayıt olan kullanıcı sayısı (haftalık/aylık)

Aktif öğretmen sayısı (gönderdiği profil/aktif rezervasyon)

Rezervasyon sayısı (günlük/hedef)

Rezervasyon dönüşüm oranı (talep → onay oranı)

Uygulama hata oranı (Sentry events)

Ortalama cevap süresi (öğretmenden gelen cevap/teklif süresi)

14. Operasyonel Riskler & Hafifletme Stratejileri

Düşük öğretmen sayısı: pazarlama, referans programı, onboarding kolaylığı

Yüksek talep → performans sorunları: caching (Redis), DB replica, autoscaling

Güvenlik olayları: düzenli güvenlik taramaları, WAF, incident response planı

15. Ek / İleri Düzey (Gelecek İçin Öneriler)

Video ders / canlı ders entegrasyonu (Jitsi/Zoom/Agora).

Ödeme sistemleri & fatura modülü (iyzico/Stripe).

İn-app messaging (Socket/Realtime) + push notification.

Öğrenci–öğretmen derecelendirme ve yorum sistemi.

AI tabanlı öğretmen öneri motoru (öğrenci davranışına göre).

Çoklu dil desteği (i18n) ve çok para birimli fiyatlandırma.

16. Kabul Kriterleri (Acceptance Criteria) — Örnek

Kullanıcılar kayıt olabilir ve e-postalarını doğrulayabilir.

Öğretmen profilleri oluşturulabilir ve güncellenebilir.

Öğrenci öğretmen arayıp filtreleyebilir ve rezervasyon talebi gönderip geçmişine erişebilir.

Öğretmen gelen rezervasyonları görebilir ve kabul/ret edebilir.

Admin panelinden kullanıcılar ve rezervasyonlar listelenip yönetilebilir.

Uygulama iOS ve Android temel cihazlarda açılıp temel akışları tamamlayabilmelidir.

17. Dokümantasyon & Kod Standartları

API dokümanları: OpenAPI / Swagger (otomatik generate).

Kod standartları: PSR-12 (PHP), linter & formatter (ESLint/Prettier for JS), flutter format ve dart analyze.

Commit mesaj standardı: Conventional Commits.

Branching: feature branches, PR review zorunlu, main/master protected.

18. Örnek E-posta Şablonları (Kısa)

Email Verification: “Merhaba {name}, hesabınızı doğrulamak için tıklayın: {verification_link}”

Reservation Request to Teacher: “Yeni bir ders talebi aldınız: {student_name} — {subject} — önerilen tarih: {date}. Onaylamak için {link}”

Reservation Accepted to Student: “Tebrikler! {teacher_name} rezervasyonunuzu onayladı. Detaylar: {link}.”

19. Son Söz — Teslimat & Başlangıç Adımları

İlk adım olarak wireframe ve minimal data model onayı (1 hafta) ile başlanması tavsiye edilir. Ardından sprint bazlı geliştirme (2 haftalık sprintler) ile hızlı MVP çıkarmak hedeflenmelidir. Hızlı geri bildirim ve canlı kullanıcı testleri (UAT) ile iyileştirme döngüsü kurulacaktır.



<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('messages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('receiver_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('reservation_id')->nullable()->constrained()->onDelete('cascade');
            $table->text('content');
            $table->enum('message_type', ['text', 'image', 'file', 'audio', 'video'])->default('text');
            $table->string('file_url')->nullable();
            $table->string('file_name')->nullable();
            $table->string('file_size')->nullable();
            $table->string('file_type')->nullable();
            $table->boolean('is_read')->default(false);
            $table->timestamp('read_at')->nullable();
            $table->boolean('is_deleted')->default(false);
            $table->timestamp('deleted_at')->nullable();
            $table->timestamps();
            
            $table->index(['sender_id', 'receiver_id']);
            $table->index(['receiver_id', 'is_read']);
            $table->index(['reservation_id']);
            $table->index(['created_at']);
        });
         Schema::create('conversations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user1_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('user2_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('reservation_id')->nullable()->constrained()->onDelete('cascade');
            $table->timestamp('last_message_at')->nullable();
            $table->text('last_message')->nullable();
            $table->boolean('user1_deleted')->default(false);
            $table->boolean('user2_deleted')->default(false);
            $table->timestamps();
            
            $table->unique(['user1_id', 'user2_id']);
            $table->index(['user1_id', 'last_message_at']);
            $table->index(['user2_id', 'last_message_at']);
        });

        Schema::create('message_reactions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('message_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('reaction');
            $table->timestamps();
            
            $table->unique(['message_id', 'user_id']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('message_reactions');
        Schema::dropIfExists('conversations');
        Schema::dropIfExists('messages');
    }
};







<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });
         Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};



gcloud run deploy nazliyavuz-backend --image europe-west4-docker.pkg.dev/secret-outpost-470318-f3/nazliyavuz-repo/nazliyavuz-backend:latest --region europe-west4 --platform managed --allow-unauthenticated --port 8000 --memory 2Gi --cpu 2 --timeout 300 --max-instances 10 --set-env-vars "APP_ENV=production,APP_DEBUG=false,DB_CONNECTION=sqlite,DB_DATABASE=/var/www/database/database.sqlite,MAIL_MAILER=smtp,MAIL_HOST=smtp.gmail.com,MAIL_PORT=587,MAIL_USERNAME=nazliyavuz.platform@gmail.com,MAIL_PASSWORD=bbgwrtdguuqvbicz,MAIL_ENCRYPTION=tls,MAIL_FROM_ADDRESS=noreply@nazliyavuz.com,MAIL_FROM_NAME=Nazliyavuz Platform"




Invoke-RestMethod -Uri "https://nazliyavuz-backend-1050061286516.europe-west4.run.app/api/v1/categories" -Method GET

php -S 192.168.234.19:8080 -t public


ssh can65385@34.77.40.180 "cd ~/nazliyavuz-platform/backend && php artisan serve --host=0.0.0.0 --port=8000" 